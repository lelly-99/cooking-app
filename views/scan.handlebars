<html lang="en">

<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <link href='https://fonts.googleapis.com/css?family=PT Serif Caption' rel='stylesheet'>
  <!-- Link icons -->
  <link href="https://unpkg.com/boxicons@2.1.4/css/boxicons.min.css" rel="stylesheet" />
  <!-- Link Dom -->
  <script src="/dom/nav-collapse.js" defer></script>
  <!-- GENERAL STYLE FOR ALL PAGES -->
  <link rel="stylesheet" href="/css/style.css" />
  <!-- STYLE FOR ALL SCAN PAGE -->
  <link rel="stylesheet" href="/css/scan.css" />
  <title>Scan Ingredient</title>
</head>

<body>
  <header class="header">
    <a href="#" class="logo-text">
      FOOD<span class="logo-span">SCAN</span>
    </a>
    <nav class="main-nav">
      <ul class="main-nav-list">
        <li><a class="main-nav-link" href="#">Home</a></li>
        <li><a class="main-nav-link" href="#">Contact</a></li>
        <li><a class="main-nav-link active" href="#">Scan</a></li>
        <div class="user user-mobile">
          <li><a class="main-nav-link" href="#"><i class='bx bx-user'></i></a></li>
          <li><a class="main-nav-link" href="#">User</a></li>
        </div>
      </ul>
    </nav>
    <div class="user user-desktop">
      <li><a class="main-nav-link" href="#"><i class='bx bx-user'></i></a></li>
      <li><a class="main-nav-link" href="#">User</a></li>
    </div>
    <button class="btn-mobile-nav">
      <i class="bx bx-menu-alt-left icon-mobile-nav" id="bx-menu-alt-left"></i>
      <i class="bx bx-x icon-mobile-nav" id="bx-x"></i>
    </button>
  </header>
  <main>
    <div class="scan container">
      <h3 class="scan-secondary-heading">Show ingredient below </h3>
      <!-- ********************** webcam for the model **************************** -->
      <div id="webcam-container"></div>
      <div id="label-container"></div>
      <script src="https://cdn.jsdelivr.net/npm/@tensorflow/tfjs@latest/dist/tf.min.js"></script>
      <script
        src="https://cdn.jsdelivr.net/npm/@teachablemachine/image@latest/dist/teachablemachine-image.min.js"></script>
      <script type="text/javascript">
        // More API functions here:
        // https://github.com/googlecreativelab/teachablemachine-community/tree/master/libraries/image

        // the link to your model provided by Teachable Machine export panel
        const URL = "https://teachablemachine.withgoogle.com/models/K4TAnqUWm/";

        let model, webcam, labelContainer, maxPredictions;

        // Load the image model and setup the webcam
        async function init() {
          const modelURL = URL + "model.json";
          const metadataURL = URL + "metadata.json";

          // load the model and metadata
          // Refer to tmImage.loadFromFiles() in the API to support files from a file picker
          // or files from your local hard drive
          // Note: the pose library adds "tmImage" object to your window (window.tmImage)
          model = await tmImage.load(modelURL, metadataURL);
          maxPredictions = model.getTotalClasses();

          // Convenience function to setup a webcam
          const flip = true; // whether to flip the webcam
          webcam = new tmImage.Webcam(350, 350, flip); // width, height, flip
          await webcam.setup(); // request access to the webcam
          await webcam.play();
          window.requestAnimationFrame(loop);

          // append elements to the DOM
          document.getElementById("webcam-container").appendChild(webcam.canvas);
          labelContainer = document.getElementById("label-container");
          for (let i = 0; i < maxPredictions; i++) {
            // and class labels
            labelContainer.appendChild(document.createElement("div"));
          }
        }

        async function loop() {
          webcam.update(); // update the webcam frame
          await predict();
          window.requestAnimationFrame(loop);
        }

        // run the webcam image through the image model
        async function predict() {
          // predict can take in an image, video or canvas html element
          const prediction = await model.predict(webcam.canvas);
          for (let i = 0; i < maxPredictions; i++) {
            const classPrediction =
              prediction[i].className + ": " + prediction[i].probability.toFixed(2);
            labelContainer.childNodes[i].innerHTML = classPrediction;
          }
        }

      </script>


      <!-- ********************** webcam for the model **************************** -->
      <!-- <button class="scan start-btn">Start</button> -->
      <div class="start-btn-wrapper"><button class="scan start-btn" type="button" onclick="init()">Start</button></div>
      <div class="scan text-link-wrapper">
        <p class="scan igredient-text">Looks like what you scanned is a
          carrot, follow the link below for more.</p>
        <a class="scan anchor" href="/dishList">see what you can do with
          carrot</a>
      </div>
    </div>
  </main>
</body>

</html>